class Solution {
public: 
    int findsum(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp){
        if(i==0 && j==0) return grid[0][0];
        if(i<0 || j<0) return 1e9;
        if(dp[i][j]!=-1) return dp[i][j];
        int up=grid[i][j]+findsum(i-1,j,grid,dp);
        int down=grid[i][j]+findsum(i,j-1,grid,dp);
        return dp[i][j]=min(up,down);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return findsum(n-1,m-1,grid,dp);
    }
};

tabulation meathod


class Solution {
  public:
    // Function to return the minimum cost to react at bottom
    // right cell from top left cell.
    int minimumCostPath(vector<vector<int>>& grid) {
        // Code here
    int n=grid.size();
    int m=grid[0].size();
    vector<vector<int>>dp(n,vector<int>(m,-1));

    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(i==0 && j==0) dp[i][j]=grid[i][j];
            else{
               int up=grid[i][j];
               if(i>0) up+=dp[i-1][j];
               else up+=1e9;
               
               int down=grid[i][j];
               if(j>0) down+=dp[i][j-1];
               else down+=1e9;
               
               dp[i][j]=min(up,down);
            }
        }
    }
    return dp[n-1][m-1];
    }
};

optimesd space


class Solution {
  public:
    // Function to return the minimum cost to react at bottom
    // right cell from top left cell.
    int minimumCostPath(vector<vector<int>>& grid) {
        // Code here
     int n=grid.size();
    int m=grid[0].size();
    vector<int>dp(m,0);

    for(int i=0;i<n;i++){
        vector<int>temp(m,0);
        for(int j=0;j<m;j++){
            if(i==0 && j==0) temp[j]=grid[i][j];
            else{
                int up=grid[i][j];
                if(i>0) up+=dp[j];
                else{
                    up+=1e9;
                }

                 int down=grid[i][j];
                if(j>0) down=temp[j-1];
                else{
                    down+=1e9;
                }
                 temp[j]=min(up,down);
            }
        }
        dp=temp;
    }
    return dp[m-1];
    }
};
