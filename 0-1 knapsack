using memeoization and tabulation 
class Solution {
  public:
  int theif(int i,vector<int>&val,vector<int>&wt,int w,vector<vector<int>>&dp){
      if(i==0){
          if(wt[i]<=w) return val[i];
          return 0;
      }
      if(dp[i][w]!=-1) return dp[i][w];
      int notake=theif(i-1,val,wt,w,dp);
      int take=INT_MIN;
      if(wt[i]<=w){
          take=val[i]+theif(i-1,val,wt,w-wt[i],dp);
      }
      
      return dp[i][w]=max(take,notake);
  }
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
        int n=val.size();
        vector<vector<int>>dp(n,vector<int>(W+1,0));
        for(int i=wt[0];i<=W;i++){
            dp[0][i]=val[0];
        }
        for(int i=1;i<n;i++){
            for(int weight=0;weight<=W;weight++){
                int notake=dp[i-1][weight];
                int take=INT_MIN;
                if(wt[i]<=weight){
                    take=val[i]+dp[i-1][weight-wt[i]];
                }
                dp[i][weight]=max(take,notake);
            }
        }
        return dp[n-1][W];
        
    }
};
